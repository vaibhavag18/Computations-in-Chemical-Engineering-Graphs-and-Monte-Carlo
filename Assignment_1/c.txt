SOLUTIONS: LINKED LISTS




Q1)
ListNode* deleteMiddle(ListNode* head)
{
if (head == nullptr || head->next == nullptr)
{
return nullptr;
}
ListNode* fast=head;
ListNode* slow=head;
ListNode* prev=nullptr;
while(fast != nullptr && fast->next != nullptr)
{
prev=slow;
slow=slow->next;
fast=fast->next->next;
}
if (prev != nullptr)
{
prev->next = slow->next;
delete slow;
}
else
{
ListNode* temp = head;
head = head->next;
delete temp;
}
return head;
}


Q2)
ListNode* mergeTwoLists(ListNode* list1, ListNode* list2)
{
ListNode* dummy = new ListNode(0);
ListNode* current = dummy;


while (list1 != nullptr && list2 != nullptr)
{
if (list1->val < list2->val)
{
current->next = list1;
list1 = list1->next;
}
else
{
current->next = list2;
list2 = list2->next;
}
current = current->next;
}
if (list1 != nullptr)
{
current->next = list1;
}
else
{
current->next = list2;
}
ListNode* mergedList = dummy->next;
delete dummy;
return mergedList;
}




Trees:
Q1) 
int maxDepth(TreeNode* root) {
        if (root == nullptr) {
            return 0;
        }
        
        int leftDepth = maxDepth(root->left);
        int rightDepth = maxDepth(root->right);
        
        return 1 + max(leftDepth, rightDepth);
    }

Q2)
class Solution {
public:
    int maxLevelSum(TreeNode* root) {
        if (root == nullptr) {
            return 0;
        }
        
        int maxLevel = 1;
        int maxSum = root->val;
        int currentLevel = 1;
        
        std::queue<TreeNode*> q;
        q.push(root);
        
        while (!q.empty()) {
            int size = q.size();
            int levelSum = 0;
            
            for (int i = 0; i < size; ++i) {
                TreeNode* node = q.front();
                q.pop();
                
                levelSum += node->val;
                
                if (node->left) {
                    q.push(node->left);
                }
                
                if (node->right) {
                    q.push(node->right);
                }
            }
            
            if (levelSum > maxSum) {
                maxSum = levelSum;
                maxLevel = currentLevel;
            }
            
            currentLevel++;
        }
        
        return maxLevel;
    }
};

Q3)
class Solution {
public:
    int sumNumbers(TreeNode* root) {
        return dfs(root, 0);
    }
    
    int dfs(TreeNode* node, int currentSum) {
        if (node == nullptr) {
            return 0;
        }
        currentSum = currentSum * 10 + node->val;
        
        if (node->left == nullptr && node->right == nullptr) {
            return currentSum;
        }
        int leftSum = dfs(node->left, currentSum);
        int rightSum = dfs(node->right, currentSum);
        
        return leftSum + rightSum;
    }
};

Q4)
class Solution {
public:
    int findBottomLeftValue(TreeNode* root) {
        int result;
        std::queue<TreeNode*> q;
        q.push(root);

        while (!q.empty()) {
            int size = q.size();
            for (int i = 0; i < size; ++i) {
                TreeNode* node = q.front();
                q.pop();

                if (i == 0) {
                    result = node->val;
                }

                if (node->left) {
                    q.push(node->left);
                }

                if (node->right) {
                    q.push(node->right);
                }
            }
        }

        return result;
    }
};

Q5)
class Solution {
public:
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        if (nums.empty()) {
            return nullptr;
        }
        
        return buildBST(nums, 0, nums.size() - 1);
    }
    
    TreeNode* buildBST(vector<int>& nums, int left, int right) {
        if (left > right) {
            return nullptr;
        }
        
        int mid = left + (right - left) / 2;
        TreeNode* root = new TreeNode(nums[mid]);
        
        root->left = buildBST(nums, left, mid - 1);
        root->right = buildBST(nums, mid + 1, right);
        
        return root;
    }
};


Q6)

