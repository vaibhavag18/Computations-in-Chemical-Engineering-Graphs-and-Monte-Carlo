class Solution {
public:
    vector<int> loudAndRich(vector<vector<int>>& richer, vector<int>& quiet) 
    {
        int n = quiet.size();
        vector<int> adj[n], revadj[n];
        vector<int> ans(n, 1e9);
        vector<int> indegree(n);
        for(auto it : richer) 
        {
            adj[it[1]].push_back(it[0]);
        }
        for(int i = 0; i < n; i++) 
        {
            for(auto it : adj[i])
            {
                revadj[it].push_back(i);
                indegree[i]++;
            }
            ans[i] = i;
        }
        queue<int> q;
        for(int i = 0; i < n; i++) 
        {
            if(!indegree[i])  q.push(i);
        }
        while(!q.empty()) 
        {
            int u = q.front();
            q.pop();
            for(auto v : revadj[u]) 
            {
                indegree[v]--;
                if(quiet[ans[v]] > quiet[ans[u]]) ans[v] = ans[u];
                if(!indegree[v])  q.push(v);
            }
        }
        return ans;
    }
};