class Solution {
public:
    TreeNode * build(unordered_map<int,int> & m, vector<int> & preorder, vector<int> &inorder, int start_p,int end_p, int start_i,int end_i){
        if(start_p>end_p || start_i>end_i){
            return NULL;
        }
        TreeNode * root=new TreeNode (preorder[start_p]);
        // auto it=find(inorder.begin()+start_i,inorder.begin()+end_i+1,preorder[start_p]);
        int idx=m[preorder[start_p]];
        root->left=build(m,preorder,inorder,start_p+1,start_p+idx-start_i,start_i,idx-1);
        root->right=build(m,preorder,inorder,end_p+1-end_i+idx,end_p,idx+1,end_i);


        return root;
    }
    TreeNode* buildTree(vector<int>& preorder, 
    vector<int>& inorder) {
        unordered_map<int,int> m;
        for(int i=0;i<inorder.size();i++){
            m[inorder[i]]=i;
        }
        return build(m,preorder,inorder,0,preorder.size()-1,0,inorder.size()-1);


        
    }
};
/////////////////////////////////////////
class Solution {
public:
    int maxDepth(TreeNode* root) {
        if(!root){
            return 0;
        }

        return 1+max(maxDepth(root->left),maxDepth(root->right));
        
    }
};

class Solution {
public:
    int maxLevelSum(TreeNode* root) {


        int lvl=1;
        long long maxi=-1e9;
        int maxlvl=0;
        queue<TreeNode*> q;
        q.push(root);
        q.push(NULL);
        long long sum=0;
        while(!q.empty()){
            auto it=q.front();
            q.pop();
            if(it==NULL){
                if(maxi<sum){
                    maxi=sum;
                    maxlvl=lvl;
                }
                sum=0;
                lvl++;
                if(q.size()>=1){
                q.push(NULL);
                }
                continue;
            }
            sum+=it->val;
            if(it->left){
                q.push(it->left);
            }
            if(it->right){
                q.push(it->right);
            }

        }

        return maxlvl;
        
    }
};



class Solution {
public:

void solve(int & ans , int num, TreeNode * root){
    if(!root){
        return ;
    }
    num*=10;
    num+=root->val;
    if(!root->left && !root->right){
        ans+=num;
        return ;
    }

    if(root->left){
        solve(ans,num,root->left);
    }
    if(root->right){
        solve(ans,num,root->right);
    }

}
    int sumNumbers(TreeNode* root) {

        int ans=0;
        int num=0;
        solve(ans,num,root);
        return ans;
        
    }
};


