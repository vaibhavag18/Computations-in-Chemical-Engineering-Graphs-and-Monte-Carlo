class Solution {
public:

void exploreConnectedArea(vector<vector<int>> &isVisited, vector<vector<char>> &grid, int row, int col){

        isVisited[row][col] = 1;
        int dr[] = {-1, 1, 0, 0};
        int dc[] = {0, 0, 1, -1};
        for(int i = 0; i < 4; i++){
            int currRow = row + dr[i];
            int currCol = col + dc[i];
            if(currRow >= 0 && currRow < grid.size() && currCol >= 0 && currCol < grid[0].size()){
                if(!isVisited[currRow][currCol] && grid[currRow][currCol] == 'O'){
                    exploreConnectedArea(isVisited, grid, currRow, currCol);
                }
            }
        }
    }
    
    void solveSurroundedRegions(vector<vector<char>>& board) {

        vector<vector<int>> isVisited(board.size(), vector<int>(board[0].size(), 0));

        for(int i = 0; i < board.size(); i++){
            if(board[i][0] == 'O'){
                exploreConnectedArea(isVisited, board, i, 0);
            }
            if(board[i][board[0].size() - 1] == 'O'){
                exploreConnectedArea(isVisited, board, i, board[0].size() - 1);
            }
        }

        for(int j = 1; j < board[0].size() - 1; j++){
            if(board[0][j] == 'O'){
                exploreConnectedArea(isVisited, board, 0, j);
            }
            if(board[board.size() - 1][j] == 'O'){
                exploreConnectedArea(isVisited, board, board.size() - 1, j);
            }
        }

        for(int i = 0; i < board.size(); i++){
            for(int j = 0; j < board[0].size(); j++){
                if(!isVisited[i][j]){
                    board[i][j] = 'X';
                }
            }
        }        
    }
};
