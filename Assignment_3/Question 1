class Solution {
public:
    void traverseGraph(int vertex, vector<bool> &visited, vector<int> adjacencyList[]) {
        visited[vertex] = true;
        for (auto neighbor : adjacencyList[vertex]) {
            if (!visited[neighbor]) {
                traverseGraph(neighbor, visited, adjacencyList);
            }
        }
    }

    int countConnectedComponents(vector<vector<int>>& matrix) {
        int size = static_cast<int>(matrix.size());
        const int MAX_SIZE = 444;
        vector<int> adjacencyList[MAX_SIZE];
        vector<bool> visited(MAX_SIZE);

        for (int i = 0; i < size; ++i) {
            for (int j = 0; j < size; ++j) {
                if (matrix[i][j] == 1 && i != j) {
                    adjacencyList[i].push_back(j);
                }
            }
        }

        visited.assign(size + 4, false);
        int componentCount = 0;

        for (int i = 0; i < size; ++i) {
            if (!visited[i]) {
                traverseGraph(i, visited, adjacencyList);
                componentCount++;
            }
        }

        return componentCount;
    }
};
