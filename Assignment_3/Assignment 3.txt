Solution of number of provinces
class Solution {
public:
    int res,c = 0,n,vis[201]={0};
    void dfs(vector<vector<int>>& isConnected,int start){
        vis[start] = true;c++;
        for(int connection = 0;connection<n;connection++){
            if(!vis[connection] and isConnected[start][connection]) dfs(isConnected,connection);
        }
    }
    int findCircleNum(vector<vector<int>>& isConnected) {
        n = isConnected.size();
        for(int i = 0;i<n;i++) if(!vis[i]) c=0,dfs(isConnected,i),res++;;
        return res;   
    }
};



Solution of flood fill
class Solution {
public:

    int initialcol;
    int col;

    void helper(vector<vector<int>> &arr, int a, int b){
        int n = arr.size();
        int m = arr[0].size();

        if(a<0 || b<0 || a>=n || b>=m) return;

        if(arr[a][b]!=initialcol) return;

        arr[a][b] = col;

        helper(arr,a,b+1);
        helper(arr,a,b-1);
        helper(arr,a-1,b);
        helper(arr,a+1,b);
    }
    vector<vector<int>> floodFill(vector<vector<int>>& arr, int sr, int sc, int color) {
        initialcol = arr[sr][sc];
        col = color;
        if(initialcol==col) return arr;
        helper(arr,sr,sc);
        return arr;
    }
};



Solution of pacific atlantic water flow
class Solution {
private:
    void dfs(vector<vector<int>>& heights, vector<vector<bool>>& visited, int i, int j, int prevHeight, bool isPacific, bool isAtlantic) {
        if (i < 0 || i >= heights.size() || j < 0 || j >= heights[0].size())
            return;
        
        if (visited[i][j] || heights[i][j] < prevHeight)
            return;

        visited[i][j] = true;
        
        if (isPacific && isAtlantic)
            return;

        dfs(heights, visited, i - 1, j, heights[i][j], isPacific, isAtlantic);
        dfs(heights, visited, i + 1, j, heights[i][j], isPacific, isAtlantic);
        dfs(heights, visited, i, j - 1, heights[i][j], isPacific, isAtlantic);
        dfs(heights, visited, i, j + 1, heights[i][j], isPacific, isAtlantic);
    }

public:
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {
        if (heights.empty() || heights[0].empty())
            return {};
        
        int m = heights.size();
        int n = heights[0].size();
        
        vector<vector<bool>> pacific(m, vector<bool>(n, false));
        vector<vector<bool>> atlantic(m, vector<bool>(n, false));

        for (int i = 0; i < m; i++) {
            dfs(heights, pacific, i, 0, INT_MIN, true, false);
            dfs(heights, atlantic, i, n - 1, INT_MIN, false, true);
        }
        
        for (int j = 0; j < n; j++) {
            dfs(heights, pacific, 0, j, INT_MIN, true, false);
            dfs(heights, atlantic, m - 1, j, INT_MIN, false, true);
        }
        
        vector<vector<int>> result;
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (pacific[i][j] && atlantic[i][j])
                    result.push_back({i, j});
            }
        }
        
        return result;
    }
};



Solution of Surrounded Regions
class Solution {
public:
    
    void dfs(int i,int j,int n,int m,vector<vector<int>> &vis,vector<vector<char>> &board)
    {
        if(i<0||i>=n||j<0||j>=m||board[i][j]=='X'|| vis[i][j]==1)   return;
        vis[i][j]=1;
        board[i][j]='I';
        dfs(i+1,j,n,m,vis,board);
        dfs(i-1,j,n,m,vis,board);
        dfs(i,j+1,n,m,vis,board);
        dfs(i,j-1,n,m,vis,board);
        
    }
    void solve(vector<vector<char>>& board) {
        int n=board.size();
        int m=board[0].size();
        vector<vector<int>> vis(n,vector<int>(m));
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(vis[i][j]==0)
                {
                    if(board[i][j]=='X')    vis[i][j]=1;
                    else
                    {
                        if(i==0||j==0||i==n-1||j==m-1)
                        {
                        dfs(i,j,n,m,vis,board);
                        }

                    }
                }
                
            }
        }
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(board[i][j]=='I')     board[i][j]='O';
                else if(board[i][j]=='O')     board[i][j]='X';
            }
        }

    }
};



Solution of possible bipartition
class Solution {
public:
    bool possibleBipartition(int n, vector<vector<int>>& dislikes) {
        
        vector<int> part(n+1, -1);
        vector<vector<int>> edges(n+1);
        for(auto& dislike: dislikes) {
            edges[dislike[0]].push_back(dislike[1]);
            edges[dislike[1]].push_back(dislike[0]);
        }
        auto bfs = [&](int i){
            if(part[i] == -1) 
                part[i] = 0;
            else return true;
            deque<int> queue = {i};
            while(!queue.empty()) {
                int cur = queue.front();
                queue.pop_front();
                for(int nei: edges[cur]) {
                    if(part[nei] == part[cur]) return false;
                    if(part[nei] == -1) {
                        part[nei] = part[cur] ^ 1;
                        queue.push_back(nei);
                    }
                }
            }
            return true;
        };
        for(int i = 1; i <= n; i++) {
            if(!bfs(i)) return false;
        }
        return true;
    }
};



Solution of Course Schedule
class Solution {
public:
    
bool iscycle(int src, vector<vector<int>> &adj, vector<bool> &visited, vector<int>&stack)
{
    stack[src] = true;
    if(!visited[src]){
        visited[src]=true;
        for(auto i : adj[src]){
            if(!visited[i] && iscycle(i,adj,visited,stack)){
                return true;
            }
            if(stack[i]){
                return true;
            }
        }
    }
    stack[src]=false;
    return false;
}
    
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        
        vector<vector<int>>adj(numCourses);

        for(int i=0;i<prerequisites.size();i++){
            adj[prerequisites[i][0]].push_back(prerequisites[i][1]);
        }
        
        bool cycle = false;
    vector<int>stack(numCourses,0);
    vector<bool> visited(numCourses, 0);

    for (int i = 0; i < numCourses; i++)
    {
        if (!visited[i] && iscycle(i,adj, visited,stack))
        {
            cycle= true;
        }
    }
         if(!cycle){    
            return true;
         }else{
             return false;
         }
    }
};



Solution of loud and rich
class Solution {
    int dfs(vector<vector<int>>&adj,vector<bool>&vis,vector<int>&ind,int node,vector<int>&q){
        vis[node]=1;
        for(auto i:adj[node]){
            if(!vis[i]){
                int x=dfs(adj,vis,ind,i,q);
                if(q[x]<=q[ind[node]]){
                    ind[node]=x;
                }
            }else{
                if(q[ind[i]]<=q[ind[node]]){
                    ind[node]=ind[i];
                }
            }
        }
        return ind[node];
    }
public:
    vector<int> loudAndRich(vector<vector<int>>& r, vector<int>& q) {
        vector<vector<int>>adj(q.size());
        for(auto i:r){
            adj[i[1]].push_back(i[0]);
        }
        vector<bool>vis(q.size(),0);
        vector<int>ind(q.size());
        for(int i=0;i<q.size();i++){
            ind[i]=i;
        }
        for(int i=0;i<q.size();i++){
            if(!vis[i]){
                int x=dfs(adj,vis,ind,i,q);
                if(q[ind[i]]>=q[x]){
                    ind[i]=x;
                }
            }
        }
        return ind;
    }
};



Solution of Network Delay Time
typedef pair<int, int> pii;

class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        vector<vector<pii> > g(n + 1);
        for (const auto& t : times) {
            g[t[0]].emplace_back(t[1], t[2]);
        }
        const int inf = 1e9;
        vector<int> dist(n + 1, inf);
		vector<bool> vis(n + 1, false);
        dist[k] = 0;
        priority_queue<pii, vector<pii>, greater<pii> > pq;
        pq.emplace(0, k);
        int u, v, w;
        while (!pq.empty()) {
            u = pq.top().second; pq.pop();
			if (vis[u]) continue;
			vis[u] = true;
            for (auto& to : g[u]) {
                v = to.first, w = to.second;
                if (dist[v] > dist[u] + w) {
                    dist[v] = dist[u] + w;
                    pq.emplace(dist[v], v);
                }
            }
        }
        int ans = *max_element(dist.begin() + 1, dist.end());
        return ans == inf ? -1 : ans;
    }
};