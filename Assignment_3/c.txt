Q1)

class Solution {
public:
    int findCircleNum(std::vector<std::vector<int>>& isConnected) {
        int n = isConnected.size();
        int provinces = 0;
        std::vector<bool> visited(n, false);

        for (int i = 0; i < n; ++i) {
            if (!visited[i]) {
                dfs(isConnected, i, visited);
                provinces++;
            }
        }

        return provinces;
    }

private:
    void dfs(std::vector<std::vector<int>>& isConnected, int city, std::vector<bool>& visited) {
        visited[city] = true;

        for (int neighbor = 0; neighbor < isConnected.size(); ++neighbor) {
            if (isConnected[city][neighbor] == 1 && !visited[neighbor]) {
                dfs(isConnected, neighbor, visited);
            }
        }
    }
};

Q2)

class Solution {
public:
    std::vector<std::vector<int>> floodFill(std::vector<std::vector<int>>& image, int sr, int sc, int newColor) {
        int originalColor = image[sr][sc];

        if (originalColor != newColor) {
            dfs(image, sr, sc, originalColor, newColor);
        }

        return image;
    }

private:
    void dfs(std::vector<std::vector<int>>& image, int row, int col, int originalColor, int newColor) {
        if (row < 0 || row >= image.size() || col < 0 || col >= image[0].size() || image[row][col] != originalColor) {
            return;
        }
        image[row][col] = newColor;

        dfs(image, row - 1, col, originalColor, newColor);
        dfs(image, row + 1, col, originalColor, newColor);
        dfs(image, row, col - 1, originalColor, newColor);
        dfs(image, row, col + 1, originalColor, newColor); 
    }
};

Q3)

class Solution {
public:
   void display(vector<vector<int>> &a)
{
    for (int i = 0; i < a.size(); i++)
    {
        for (int j = 0; j < a[0].size(); j++)
        {
            cout << a[i][j] << " ";
        }
        cout << endl;
    }
    cout << endl;
}
    
    void dfs1(vector<vector<int>> & heights, vector<vector<int>> &visited,int row,int col){
        visited[row][col]=1;

        int delrow[]={1,-1,0,0};
        int delcol[]={0,0,1,-1};


        for(int i=0;i<4;i++){
            int new_row=row+delrow[i];
            int new_col=col+delcol[i];

            if(new_row>=0 && new_row<heights.size() && new_col>=0 && new_col<heights[0].size()){
                if(!visited[new_row][new_col] && heights[new_row][new_col]>=heights[row][col]){
                    dfs1(heights,visited,new_row,new_col);
                }
            }
        }
    }

    void dfs2(vector<vector<int>> & heights, vector<vector<int>>& visited, vector<vector<int>> & vis, int row,int col,vector<vector<int>> & ans){
        if(vis[row][col]==1){
            return ;
        }
        if(visited[row][col]){
            vector<int> temp;
            temp.push_back(row);
            temp.push_back(col);
            ans.push_back(temp);
        }
        
        vis[row][col]=1;

        int delrow[]={1,-1,0,0};
        int delcol[]={0,0,1,-1};


        for(int i=0;i<4;i++){
            int new_row=row+delrow[i];
            int new_col=col+delcol[i];

            if(new_row>=0 && new_row<heights.size() && new_col>=0 && new_col<heights[0].size()){
                if(vis[new_row][new_col]==0 && heights[new_row][new_col]>=heights[row][col]){
                    dfs2(heights,visited,vis,new_row,new_col,ans);
                }
            }
        }


    }

 
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {

        vector<vector<int>> visited(heights.size(),vector<int>(heights[0].size(),0));
        vector<vector<int>> vis(heights.size(),vector<int>(heights[0].size(),0));

        for(int i=0;i<heights.size();i++){
            dfs1(heights,visited,i,0);
        }
        for(int j=1;j<heights[0].size();j++){
            dfs1(heights,visited,0,j);
        }

        display(visited);

        vector<vector<int>> ans;
        for(int i=0;i<heights.size();i++){
            dfs2(heights,visited,vis,i,heights[0].size()-1,ans);
        }

        for(int j=0;j<heights[0].size()-1;j++){
            dfs2(heights,visited,vis,heights.size()-1,j,ans);
        }

        return ans;


        
    }
};


Q4)

class Solution {
public:

void dfs(vector<vector<int>> &visited, vector<vector<char>> & grid, int row,int col){

        visited[row][col]=1;
        int delrow[]={-1,1,0,0};
        int delcol[]={0,0,1,-1};
        for(int i=0;i<4;i++){
            int curr_row=row+delrow[i];
            int curr_col=col+delcol[i];
            if(curr_row>=0 && curr_row<grid.size() && curr_col>=0 && curr_col<grid[0].size()){
                if(!visited[curr_row][curr_col] && grid[curr_row][curr_col]=='O'){
                    dfs(visited,grid,curr_row,curr_col);
                }
            }
        }
    }
    void solve(vector<vector<char>>& board) {

        vector<vector<int>> visited(board.size(),vector<int>(board[0].size(),0));


        for(int i=0;i<board.size();i++){
            if(board[i][0]=='O'){
                dfs(visited,board,i,0);
            }
            if(board[i][board[0].size()-1]=='O'){
                dfs(visited,board,i,board[0].size()-1);
            }
        }

        for(int j=1;j<board[0].size()-1;j++){
            if(board[0][j]=='O'){
                dfs(visited,board,0,j);
            }
            if(board[board.size()-1][j]=='O'){
                dfs(visited,board,board.size()-1,j);
            }
        }

        for(int i=0;i<board.size();i++){
            for(int j=0;j<board[0].size();j++){
                if(!visited[i][j]){
                    board[i][j]='X';
                }
            }
        }

        
    }

    };

Q5)

class Solution {
public:
    bool possibleBipartition(int n, std::vector<std::vector<int>>& dislikes) {
        std::unordered_map<int, std::vector<int>> graph;
        std::vector<int> color(n + 1, 0); // 0: uncolored, 1: group A, -1: group B

        // Build the graph
        for (const auto& dislike : dislikes) {
            graph[dislike[0]].push_back(dislike[1]);
            graph[dislike[1]].push_back(dislike[0]);
        }

        for (int i = 1; i <= n; ++i) {
            if (color[i] == 0 && !dfs(graph, color, i, 1)) {
                return false;
            }
        }

        return true;
    }

private:
    bool dfs(const std::unordered_map<int, std::vector<int>>& graph, std::vector<int>& color, int node, int currentColor) {
        if (color[node] != 0) {
            return color[node] == currentColor;
        }

        color[node] = currentColor;

        for (int neighbor : graph.at(node)) {
            if (!dfs(graph, color, neighbor, -currentColor)) {
                return false;
            }
        }

        return true;
    }
};

Q6)

class Solution {
public:

// void dfs(vector<int> & indegree , int node , vector<vector<int>> & adj , vector<int> & visited){
//     visited[node]=1;
//     for(auto it : adj[node]){
//         indegree[it]++;
//         if(!visited[it]){
//             dfs(indegree,it,adj,visited);
//         }
//     }

// }

// void topo(vector<vector<int>> & adj ){
//     vector<int> indegree(n, 0);
//     vector<int> visited(n,0);
//     for(int i=0;i<n;i++)}{
//         if(!visited[i]){
//             dfs(indegree,i,adj,visited);
//         }
//     }

//     queue<int> q;
//     vector<int> top(n,0);
//     for(int i=0;i<n;i++){
//         if(indegree[i]==0){
//             q.push(i);
//         }
//     }

    
//     while(!q.empty()){
//         int node=q.front();
//         q.pop();

//         top.push(node);
//         for(auto it:adj[node]){
//             indegree[it]--;
//             if(indegree[it]==0){
//                 q.push(it);
//             }
//         }
//     }






// }
    bool canFinish(int n, vector<vector<int>>& prerequisites) {

vector<int> indegree(n, 0);
        vector<vector<int>> adj(n+1);
        for(int i=0;i<prerequisites.size();i++){
            adj[prerequisites[i][1]].push_back(prerequisites[i][0]);

            indegree[prerequisites[i][0]]++;
        }



    queue<int> q;
    vector<int> vis(n,0);
    for(int i=0;i<n;i++){
        if(indegree[i]==0){
            q.push(i);
        }
    }
    while(!q.empty()){
        int node=q.front();
        q.pop();
        vis[node]=1;
        for(auto it:adj[node]){
            indegree[it]--;
            if(indegree[it]==0){
                q.push(it);
            }
        }
    }
    for(int i=0;i<n;i++){
        if(vis[i]==0){
            return false;
        }
    }

    return true;
        
    }
};

Q7)

class Solution {
public:
void dfs(int node,vector<vector<int>> & adj, vector<int> & quiet,
vector<int> & vis,vector<int> & ans){
    vis[node]=1;
    int x=node;
    for(auto it:adj[node]){
        if(vis[it]){
        }
        else{
            dfs(it,adj,quiet,vis,ans);
        }
         if(quiet[x]>quiet[ans[it]]){
                x=ans[it];
            }

    }
    ans[node]=x;

}
    vector<int> loudAndRich(vector<vector<int>>& richer, vector<int>& quiet) {

        vector<vector<int>> adj(quiet.size()+1);
        for(int i=0;i<richer.size();i++){
            adj[richer[i][1]].push_back(richer[i][0]);
        }
        vector<int> ans(quiet.size());
        for(int i=0;i<ans.size();i++){
            ans[i]=i;
        }

        vector<int> vis(quiet.size());
        for(int i=0;i<quiet.size();i++){
            if(!vis[i]){
                dfs(i,adj,quiet,vis,ans);
            }
        }
        return ans;
        
    }
};

Q8)

class Solution {
public:
    int networkDelayTime(std::vector<std::vector<int>>& times, int n, int k) {
        // Build the graph representation
        std::unordered_map<int, std::vector<std::pair<int, int>>> graph;
        for (const auto& time : times) {
            graph[time[0]].push_back({time[1], time[2]});
        }

        // Initialize distances array with infinity
        std::vector<int> distances(n + 1, INT_MAX);
        distances[k] = 0;

        // Priority queue to store {node, distance} pairs
        std::priority_queue<std::pair<int, int>, std::vector<std::pair<int, int>>, std::greater<std::pair<int, int>>> pq;
        pq.push({0, k});

        while (!pq.empty()) {
            int currNode = pq.top().second;
            int currDist = pq.top().first;
            pq.pop();

            for (const auto& neighbor : graph[currNode]) {
                int nextNode = neighbor.first;
                int edgeWeight = neighbor.second;

                int newDist = currDist + edgeWeight;
                if (newDist < distances[nextNode]) {
                    distances[nextNode] = newDist;
                    pq.push({newDist, nextNode});
                }
            }
        }

        // Find the maximum distance among all nodes
        int maxTime = 0;
        for (int i = 1; i <= n; ++i) {
            if (distances[i] == INT_MAX) {
                return -1; // Not all nodes are reachable
            }
            maxTime = std::max(maxTime, distances[i]);
        }

        return maxTime;
    }
};

Q9)

typedef pair<int,pair<int,int>> pp;
class Solution {
public:
    int minCost(vector<vector<int>>& grid) {

    unordered_map<int,pair<int,int>> dir;
    dir[4]={-1,0};
    dir[3]={1,0};
    dir[2]={0,-1};
    dir[1]={0,1};

    priority_queue <pp, vector<pp>, greater<pp>> pq;
    pq.push({0,{0,0}});
    vector<vector<int>> visited(grid.size(),
    vector<int>(grid[0].size(),INT_MAX));
    visited[0][0]=0;
    while(!pq.empty()){
        auto it=pq.top();
        pq.pop();
        int row=it.second.first;
        int col=it.second.second;
        
        for(int i=1;i<=4;i++){
            int delcost=0;
            if(i!=grid[row][col]){
                delcost=1;
            }
            int newr=row+dir[i].first;
            int newc=col+dir[i].second;
            if(newr>=0 && newr<grid.size() && 
            newc>=0 && newc<grid[0].size()){
            if(visited[newr][newc]>visited[row][col]+delcost){
                visited[newr][newc]=visited[row][col]+delcost;
                pq.push({visited[newr][newc],{newr,newc}});
            }
            }
        }

    }

    return visited[grid.size()-1][grid[0].size()-1];
        
        
    }

};

