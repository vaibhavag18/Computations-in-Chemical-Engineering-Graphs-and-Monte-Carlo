class Solution {
public:

    bool canFinishCourses(int numCourses, vector<vector<int>>& prerequisites) {

        vector<int> inDegrees(numCourses, 0);
        vector<vector<int>> adjacencyList(numCourses);
        
        for (int i = 0; i < prerequisites.size(); i++) {
            adjacencyList[prerequisites[i][1]].push_back(prerequisites[i][0]);
            inDegrees[prerequisites[i][0]]++;
        }

        queue<int> courseQueue;
        vector<int> visited(numCourses, 0);

        for (int i = 0; i < numCourses; i++) {
            if (inDegrees[i] == 0) {
                courseQueue.push(i);
            }
        }

        while (!courseQueue.empty()) {
            int currentCourse = courseQueue.front();
            courseQueue.pop();
            visited[currentCourse] = 1;

            for (auto nextCourse : adjacencyList[currentCourse]) {
                inDegrees[nextCourse]--;
                if (inDegrees[nextCourse] == 0) {
                    courseQueue.push(nextCourse);
                }
            }
        }

        for (int i = 0; i < numCourses; i++) {
            if (visited[i] == 0) {
                return false;
            }
        }

        return true;
    }
};
